// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL") // uses connection pooling
    directUrl = env("DATABASE_DIRECT_URL") // uses a direct connection
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String?
    refresh_token_expires_in Int? // due to GitHub provider
    access_token             String?
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String?
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Signature {
    id      String @id @default(cuid())
    name    String @db.VarChar(255)
    pattern String @db.VarChar(255)
    weight  Int    @default(1)

    scanHistory   ScanHistory[]
    threats Threat[]
}

model Threat {
    id   String @id @default(cuid())
    name String @unique @db.VarChar(255)

    threatSignatures Signature[]
}

model ScanHistory {
    id               String   @id @default(cuid())
    url              String   @db.VarChar(255)
    scanDate         DateTime @default(now())
    securityRiskCoef Float    @db.DoublePrecision

    signatures Signature[]
}
